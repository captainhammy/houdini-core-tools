[tool.pytest.ini_options]
    pythonpath = "src"
    addopts = "--cov --cov-report=html --cov-report=xml --cov-fail-under=100 --color=yes"

[tool.isort]
    profile = "black"
    src_paths = ["src/python"]
    known_houdini = ["EC2", "alignutils", "assetauthortools", "assetdownload", "autorig", "autorigs", "bakeanimation", "baseinfowindow", "bookish", "bvhviewer", "canvaseventtypes", "channelwranglesnippet", "charactertoolutils", "charpicker", "chopnettoolutils", "choptoolutils", "cloud", "cloudEULA", "cloudsubmit", "cloudtoolutils", "colorschemeutils", "contextoptions", "cop2toolutils", "copnettoolutils", "crowds", "crowdstoolutils", "dbg", "defaultstatetools", "defaulttoolmenus", "defaulttools", "digitalassetsupport", "displaymessage", "dopclothproxy", "dopclothtoolutils", "dopfemtoolutils", "dopgeofiltertoolutils", "dopinstance", "dopparticlefluidtoolutils", "doppoptoolutils", "doppyrotoolutils", "doprbdtoolutils", "dopreltoolutils", "dopsbdtoolutils", "dopsmoketoolutils", "dopsparsepyrotools", "dopstatictoolutils", "doptoolutils", "dopwiretoolutils", "dragdroputils", "drivertoolutils", "expression_functions", "expressionmenu", "fileutils", "furtoolutils", "furutils", "gasresizedynamic", "generateHDAToolsForOTL", "generate_proto", "handleutils", "hapi", "hdefereval", "hjson", "hjsonrpc", "hotkeys", "hou", "houdiniInterpreter", "houdiniengineutils", "houdinihelp", "houdiniinternals", "houpythonportion", "houxmlrpc", "hqrop", "hqueue", "hrpyc", "hscp", "husd", "husdoutputprocessors", "husdshadertranslators", "husdui", "husktrace", "hutil", "hwebserver", "images2gif", "inlinecpp", "insertionpointutils", "introspect", "lightlinker", "lightmixer", "lightstate", "loadHelpcardOTLExample", "lopcamutils", "lopedit", "loplightandcamutils", "lopshaderutils", "loptoolutils", "loputils", "mantra", "materiallinker", "metaexpr", "modelview", "mssbuild", "muscletoolutils", "mvexportutils", "nodegraph", "nodegraphalign", "nodegraphautoscroll", "nodegraphbase", "nodegraphconnect", "nodegraphdisplay", "nodegraphdispopts", "nodegraphedittext", "nodegraphfastfind", "nodegraphflags", "nodegraphfurutils", "nodegraphgestures", "nodegraphhotkeys", "nodegraphinfo", "nodegraphlayout", "nodegraphpalettes", "nodegraphpopupmenus", "nodegraphprefs", "nodegraphquicknav", "nodegraphrename", "nodegraphselectpos", "nodegraphselectposhooks", "nodegraphsnap", "nodegraphstates", "nodegraphtitle", "nodegraphtopui", "nodegraphui", "nodegraphutils", "nodegraphvellumutils", "nodegraphview", "nodepresets", "nodesearch", "nodeselectionutil", "nodethemes", "nodeutils", "objecttoolutils", "opnode_sum", "optixdownload", "paginate", "parmutils", "parsepeakuserlog", "particletoolutils", "pdg", "pdgd", "pdgdatalayer", "pdgjob", "pdgpathmap", "pdgservicepanel", "pdgstateserver", "pdgutils", "perfmon_sum", "pluginutils", "poselib", "posespacedeform", "poster", "pygmentshighlighter", "pyro2", "pythonscriptmenu", "quickplanes", "radialmenu", "rendertracker", "resourceutils", "rigtoolutils", "rmands", "roptoolutils", "sas", "scenegraphdetails", "scenegraphlayers", "shadingutils", "shelfutils", "shopclerks", "shoptoolutils", "sidefxlabs", "simtracker", "skytoolutils", "snippetmenu", "soptoolutils", "soputils", "stagemanager", "stateutils", "stroketoolutils", "taskgraphtable", "taskgraphtablepanel", "terraintoolutils", "toolprompts", "toolutils", "top", "topnettoolutils", "toptoolutils", "uiutils", "usdinlinelayermenu", "usdprimicons", "usdrenderers", "usdroputils", "vexpressionmenu", "viewerhandle", "viewerstate", "volumetoolutils", "vopcallbacks", "vopfxmenu", "vopnettoolutils", "voptoolutils", "webapiclient", "Alfred", "AlfredRun", "HQrender", "HQsim", "IFD", "IFDapi", "IFDarchive", "IFDframe", "IFDgeo", "IFDhooks", "IFDmantra", "IFDmisc", "IFDsettings", "OGL", "RIB", "RIBapi", "RIBapiprman", "RIBapiprmantext", "RIBapisoho", "RIBarchive", "RIBframe", "RIBgeo", "RIBhooks", "RIBmisc", "RIBparm", "RIBprman21.0", "RIBptinst", "RIBsettings", "RIBsohogeo", "SOHOcommon", "debug", "dsmmerge", "hbrickmap", "soho", "sohog", "sohoglue", "wranglers", "wren"]
    sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER,HOUDINI"
    import_heading_future = "Future"
    import_heading_stdlib = "Standard Library"
    import_heading_thirdparty = "Third Party"
    import_heading_firstparty = "Houdini Core Tools"
    import_heading_houdini = "Houdini"
    dedup_headings = true
    indented_import_headings = false

[tool.mypy]
    disallow_incomplete_defs = true
    disallow_untyped_calls = true
    disallow_untyped_defs = true
    files = "src"
    mypy_path = "src"
    ignore_missing_imports = true

    [[tool.mypy.overrides]]
        module = "hou.*"
        ignore_missing_imports = true


[tool.coverage]
    [tool.coverage.run]
        branch = true
        source =  ["houdini_core_tools"]
        omit = [
            "*version.py",
        ]
        disable_warnings = [
            "module-not-imported",
            "module-not-measured",
        ]

    [tool.coverage.report]
        exclude_lines = [
            # Have to re-enable the standard pragma
            "pragma: no cover",

            # Don't complain about missing debug-only code:
            "def __repr__",
            "if self.debug",
            "if TYPE_CHECKING",

            # Don't complain if tests don't hit defensive assertion code:
            "raise AssertionError",
            "raise NotImplementedError",

            # Don't complain if non-runnable code isn't run:
            "if 0:",
            "if __name__ == .__main__.:",
        ]
        ignore_errors = true
        skip_empty = true

    [tool.coverage.html]
        directory = "coverage_html_report"

[tool.pydocstringformatter]
    max-summary-lines = 2
    max-line-length = 120

[tool.ruff]
    line-length = 120

    [tool.ruff.lint]
        extend-select = [
            "E",  # pycodestyle
            "W",  # pycodestyle
            "UP", # pyupgrade
            "D",  # pydocstyle
            "F",  # Pyflakes
            "PL",  # Pylint
            "RSE",  # flake8-raise
            "B",  # flake8-bugbear
            "PT",  #  flake8-pytest-style
            "C90",  #  mccabe
            "TRY",  #  tryceratops
            "FLY",  #  flynt
            "PERF",  #  Perflint
            "LOG",  #  flake8-logging
            "BLE",  # flake8-blind-except
            "A",  # flake8-builtins
            "C4",  # flake8-comprehensions
            "RET",  # flake8-return
            "SIM",  # flake8-simplify
            "TCH",  # flake8-type-checking
            "PTH",  # flake8-use-pathlib
            "RUF",  # Ruff specific
            "FBT",  # flake8-boolean-trap
            "FURB",  # refurb
            "PYI",  # flake8-pyi
        ]
        ignore = [
            "D104",  # Missing docstring in public module
            "D105",  # Missing docstring in magic method
            "D107",  # Missing docstring in __init__
        ]

    [tool.ruff.lint.per-file-ignores]
        "src/python/houdini_core_tools/math.py" = [
            "A005",  # Module name shadowing builtin
        ]
        "tests/*.py" = [
            "FBT003",  # Boolean positional
            "PLR2004",  # Magic value in comparison
            "PLR6301",  # 'no-self-use' for tests
            "PT004",  # Fixtures not returning anything not starting with _
            "PT006",  # Expected tuple of parameter names instead of string
            "PT007",  # Expected `list` instead of `tuple` for parametrized fixtures
            "PT012",  # pytest.raises() simple statement
            "TRY003",  # Long exception messages
        ]

    [tool.ruff.lint.flake8-pytest-style]
        fixture-parentheses = false  # Match actual pytest recommendation with no parentheses

    [tool.ruff.lint.pydocstyle]
        convention = "google"

    [tool.ruff.lint.pylint]
        max-args = 6
